# [Air](https://github.com/cosmtrek/air) TOML 格式的配置文件

# 工作目录
# 使用 . 或绝对路径，请注意 `tmp_dir` 目录必须在 `root` 目录下
root = "."#使用相对路径，即相对于终端路径的当前目录
tmp_dir = "tmp"#air编译临时文件路径,没有则创建

[build]
# 只需要写你平常编译使用的shell命令。你也可以使用 `make`
# Windows平台示例: cmd = "go build -o tmp\main.exe ."
#cmd = "swag init && go build -o ./tmp/main ."实时生成接口文档
cmd = "go build -o ./tmp/main ."#cmd一般是编译命令。编译后的可执行文件名为main，路径为：./tmp
# 由`cmd`命令得到的二进制文件名
# Windows平台示例：bin = "tmp\main.exe"
bin = "tmp/main"
# 自定义执行程序的命令，可以添加额外的编译标识例如添加 GIN_MODE=release
# Windows平台示例：full_bin = "tmp\main.exe"
#执行可执行文件的完整命令：eg:full_bin = "GIN_MODE=release APP_ENV=dev APP_USER=air ./tmp/main"
full_bin = "./tmp/main ./conf/config.yaml"
# 监听以下文件扩展名的文件，当这些文件发生变化，会触发上面的执行命令
include_ext = ["go", "tpl", "tmpl", "html"]
# 忽略这些文件扩展名或目录，不监听
exclude_dir = ["assets", "tmp", "vendor", "frontend/node_modules"]
# 监听以下指定目录的文件
include_dir = []
# 排除以下文件，特殊文件发生变化，不会进行重新编译
exclude_file = []
# 如果文件更改过于频繁，则没有必要在每次更改时都触发构建。可以设置触发构建的延迟时间
delay = 1000 # ms
# 发生构建错误时，停止运行旧的二进制文件。
stop_on_error = true
# air的日志文件名，该日志文件放置在你的`tmp_dir`中
log = "air_errors.log"

[log]
# 显示日志时间
time = true

[color]
# 自定义每个部分显示的颜色。如果找不到颜色，使用原始的应用程序日志。
main = "magenta"
watcher = "cyan"
build = "yellow"
runner = "green"

[misc]
# 退出时删除tmp目录
clean_on_exit = true

